apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.formManagementProvider.name }}
  labels:
    app: {{ .Values.formManagementProvider.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.formManagementProvider.name }}
  replicas: {{ .Values.formManagementProvider.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.formManagementProvider.name }}
      {{- if or .Values.formManagementProvider.podAnnotations .Values.global.registry.formManagementProvider.istio.sidecar.enabled }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- if .Values.global.registry.formManagementProvider.istio.sidecar.enabled }}
        traffic.sidecar.istio.io/excludeOutboundPorts: '{{ .Values.formManagementProviderDb.service.port }}'
        sidecar.istio.io/inject: 'true'
        {{- include "formManagementProvider.istioResources" . | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      initContainers:
      - command:
          - sh
          - '-c'
          - >-
            while ! nc -w 1 {{ .Values.formManagementProvider.name }}-db-headless {{ .Values.formManagementProviderDb.service.port }} </dev/null; do echo waiting for
            database; sleep 10; done;
        image: {{ template "imageRegistry" . -}} busybox
        imagePullPolicy: IfNotPresent
        name: {{ .Values.formManagementProvider.name }}-init
      containers:
      - name: {{ .Values.formManagementProvider.name }}
        image: "{{ .Values.image.name }}:{{ .Values.image.version }}"
        ports:
          - containerPort: {{ .Values.formManagementProvider.port }}
            name: ui
        {{- if not .Values.global.disableRequestsLimits }}
        resources:
          {{- toYaml .Values.global.registry.formManagementProvider.container.resources | nindent 10 }}
        {{- end }}
        env:
          {{- range $name, $value := .Values.global.registry.formManagementProvider.container.envVars }}
          - name: {{ $name }}
            value: {{ $value | quote}}
          {{- end }}
          - name: NODE_OPTIONS
            value: "--max-http-header-size=32000"
          - name: LOG_LEVEL
            value: "{{ .Values.formManagementProvider.logLevel }}"
          - name: LOG_HTTP_BODY
            value: "{{ .Values.formManagementProvider.logHttpBody }}"
          - name: ROOT_EMAIL
            valueFrom:
              secretKeyRef:
                key: username
                name: "{{ .Values.formManagementProvider.name }}-credentials"
          - name: ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "{{ .Values.formManagementProvider.name }}-credentials"
          - name: MONGO_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "{{ .Values.formManagementProvider.name }}-db-credentials"
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "{{ .Values.formManagementProvider.name }}-db-credentials"
          - name: NODE_CONFIG
            value: >-
              {"mongo":
              "mongodb://$(MONGO_USERNAME):$(MONGO_PASSWORD)@{{ .Values.formManagementProvider.name }}-db-headless:{{ .Values.formManagementProviderDb.service.port }}/{{ .Values.formManagementProviderDb.defaultDatabase }}?authSource=admin",
              "host": "{{ .Values.formManagementProvider.name }}-{{ .Values.cdPipelineName }}-{{ .Values.cdPipelineStageName }}.{{ .Values.dnsWildcard }}",
              "domain": "https://{{ .Values.formManagementProvider.name }}-{{ .Values.cdPipelineName }}-{{ .Values.cdPipelineStageName }}.{{ .Values.dnsWildcard }}"}
        livenessProbe:
          httpGet:
            path: {{ .Values.formManagementProvider.livenessHealthCheckPath }}
            port: {{ .Values.formManagementProvider.port }}
            scheme: HTTP
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: {{ .Values.formManagementProvider.readinessHealthCheckPath }}
            port: {{ .Values.formManagementProvider.port }}
            scheme: HTTP
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
      serviceAccountName: {{ .Chart.Name }}
      {{- if .Values.formManagementProvider.nodeSelector }}
      nodeSelector: {{ toYaml .Values.formManagementProvider.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.formManagementProvider.podSecurityContext }}
      securityContext: {{ toYaml .Values.formManagementProvider.podSecurityContext | nindent 8 }}
      {{- end }}