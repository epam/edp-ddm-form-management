apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.formManagementModeler.name }}
  labels:
    app: {{ .Values.formManagementModeler.name }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.formManagementModeler.name }}
  replicas: {{ .Values.formManagementModeler.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.formManagementModeler.name }}
      annotations:
        sidecar.istio.io/inject: "false"       
    spec:
      initContainers:
      - command:
          - sh
          - '-c'
          - >-
            while ! nc -w 1 {{ .Values.formManagementModeler.name }}-db-headless {{ .Values.formManagementModelerDb.service.port }} </dev/null; do echo waiting for
            database; sleep 10; done;
        image: {{ template "dockerProxyRegistry" . -}} busybox
        imagePullPolicy: IfNotPresent
        name: {{ .Values.formManagementModeler.name }}-init
      containers:
      - name: {{ .Values.formManagementModeler.name }}
        image: "{{ .Values.image.name }}:{{ .Values.image.version }}"
        ports:
          - containerPort: {{ .Values.formManagementModeler.port }}
            name: ui
        env:
          - name: ROOT_EMAIL
            valueFrom:
              secretKeyRef:
                key: username
                name: "{{ .Values.formManagementModeler.name }}-credentials"
          - name: ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "{{ .Values.formManagementModeler.name }}-credentials"
          - name: MONGO_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "{{ .Values.formManagementModeler.name }}-db-credentials"
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "{{ .Values.formManagementModeler.name }}-db-credentials"
          - name: NODE_CONFIG
            value: >-
              {"mongo":
              "mongodb://$(MONGO_USERNAME):$(MONGO_PASSWORD)@{{ .Values.formManagementModeler.name }}-db-headless:{{ .Values.formManagementModelerDb.service.port }}/{{ .Values.formManagementModelerDb.defaultDatabase }}?authSource=admin",
              "host": "{{ .Values.formManagementModeler.name }}-{{ .Values.cdPipelineName }}-{{ .Values.cdPipelineStageName }}.{{ .Values.dnsWildcard }}",
              "domain": "https://{{ .Values.formManagementModeler.name }}-{{ .Values.cdPipelineName }}-{{ .Values.cdPipelineStageName }}.{{ .Values.dnsWildcard }}"}
        livenessProbe:
          httpGet:
            path: {{ .Values.formManagementModeler.livenessHealthCheckPath }}
            port: {{ .Values.formManagementModeler.port }}
            scheme: HTTP
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: {{ .Values.formManagementModeler.readinessHealthCheckPath }}
            port: {{ .Values.formManagementModeler.port }}
            scheme: HTTP
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
      serviceAccountName: {{ .Chart.Name }}
      {{- if .Values.formManagementModeler.nodeSelector }}
      nodeSelector: {{ toYaml .Values.formManagementModeler.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.formManagementModeler.podSecurityContext }}
      securityContext: {{ toYaml .Values.formManagementModeler.podSecurityContext | nindent 8 }}
      {{- end }}
